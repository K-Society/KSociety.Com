// <auto-generated />
using System;
using KSociety.Com.Infra.Transfer.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KSociety.Com.Infra.Transfer.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerComContext))]
    partial class SqlServerComContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.AnalogDigital", b =>
                {
                    b.Property<string>("AnalogDigitalSignal")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("AnalogDigitalSignal");

                    b.ToTable("AnalogDigital", (string)null);

                    b.HasData(
                        new
                        {
                            AnalogDigitalSignal = "Analog"
                        },
                        new
                        {
                            AnalogDigitalSignal = "Digital"
                        });
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.AutomationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Mean")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AutomationType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Mean = "Base",
                            Name = "Base"
                        },
                        new
                        {
                            Id = 1,
                            Mean = "Siemens",
                            Name = "Siemens"
                        },
                        new
                        {
                            Id = 2,
                            Mean = "Logix",
                            Name = "Logix"
                        },
                        new
                        {
                            Id = 3,
                            Mean = "Modbus",
                            Name = "Modbus"
                        },
                        new
                        {
                            Id = 4,
                            Mean = "Generic TCP",
                            Name = "Tcp"
                        });
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.Bit", b =>
                {
                    b.Property<byte>("BitOfByte")
                        .HasColumnType("tinyint");

                    b.Property<string>("BitName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("BitOfByte");

                    b.HasIndex("BitName")
                        .IsUnique();

                    b.ToTable("Bit", (string)null);

                    b.HasData(
                        new
                        {
                            BitOfByte = (byte)0,
                            BitName = "Bit 0"
                        },
                        new
                        {
                            BitOfByte = (byte)1,
                            BitName = "Bit 1"
                        },
                        new
                        {
                            BitOfByte = (byte)2,
                            BitName = "Bit 2"
                        },
                        new
                        {
                            BitOfByte = (byte)3,
                            BitName = "Bit 3"
                        },
                        new
                        {
                            BitOfByte = (byte)4,
                            BitName = "Bit 4"
                        },
                        new
                        {
                            BitOfByte = (byte)5,
                            BitName = "Bit 5"
                        },
                        new
                        {
                            BitOfByte = (byte)6,
                            BitName = "Bit 6"
                        },
                        new
                        {
                            BitOfByte = (byte)7,
                            BitName = "Bit 7"
                        });
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.Connection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AutomationTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("WriteEnable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AutomationTypeId");

                    b.HasIndex("Name", "AutomationTypeId")
                        .IsUnique();

                    b.ToTable("Connection", (string)null);

                    b.HasDiscriminator<int>("AutomationTypeId").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.InOut", b =>
                {
                    b.Property<string>("InputOutput")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("InputOutputName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("InputOutput");

                    b.HasIndex("InputOutputName")
                        .IsUnique();

                    b.ToTable("InOut", (string)null);

                    b.HasData(
                        new
                        {
                            InputOutput = "R",
                            InputOutputName = "Read"
                        },
                        new
                        {
                            InputOutput = "W",
                            InputOutputName = "Write"
                        },
                        new
                        {
                            InputOutput = "U",
                            InputOutputName = "Unknown"
                        },
                        new
                        {
                            InputOutput = "RW",
                            InputOutputName = "Read/Write"
                        });
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnalogDigitalSignal")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("AutomationTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("ConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("InputOutput")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)");

                    b.Property<bool>("Invoke")
                        .HasColumnType("bit");

                    b.Property<string>("MemoryAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TagGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnalogDigitalSignal");

                    b.HasIndex("AutomationTypeId");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("InputOutput");

                    b.HasIndex("TagGroupId");

                    b.HasIndex("Name", "AutomationTypeId")
                        .IsUnique();

                    b.ToTable("Tag", (string)null);

                    b.HasDiscriminator<int>("AutomationTypeId").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.TagGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Clock")
                        .HasColumnType("int");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Update")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TagGroup", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a87832e1-f49b-4a3f-bfbe-7df80d9a7cb2"),
                            Clock = 10,
                            Enable = false,
                            Name = "Group 01",
                            Update = 10
                        },
                        new
                        {
                            Id = new Guid("0f62b113-dd0d-4fcf-9ed9-9ae0acd1b092"),
                            Clock = 47,
                            Enable = true,
                            Name = "CbGroup",
                            Update = 47
                        });
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.Area", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Mean")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AreaName")
                        .IsUnique();

                    b.ToTable("S7Area", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 28,
                            AreaName = "S7AreaCT",
                            Mean = "Counter area memory (C1, C2, ...)"
                        },
                        new
                        {
                            Id = 132,
                            AreaName = "S7AreaDB",
                            Mean = "DB area memory (DB1, DB2, ...)"
                        },
                        new
                        {
                            Id = 131,
                            AreaName = "S7AreaMK",
                            Mean = "Merkers area memory (M0, M0.0, ...)"
                        },
                        new
                        {
                            Id = 130,
                            AreaName = "S7AreaPA",
                            Mean = "Output area memory"
                        },
                        new
                        {
                            Id = 129,
                            AreaName = "S7AreaPE",
                            Mean = "Input area memory"
                        },
                        new
                        {
                            Id = 29,
                            AreaName = "S7AreaTM",
                            Mean = "Timer area memory(T1, T2, ...)"
                        });
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.BlockArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<Guid>("ConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DataBlock")
                        .HasColumnType("int");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Start")
                        .HasColumnType("int");

                    b.Property<int>("WordLenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("WordLenId");

                    b.ToTable("S7BlockArea", (string)null);
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.ConnectionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("S7ConnectionType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PG"
                        },
                        new
                        {
                            Id = 2,
                            Name = "OP"
                        },
                        new
                        {
                            Id = 3,
                            Name = "S7Basic 1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "S7Basic 2"
                        },
                        new
                        {
                            Id = 5,
                            Name = "S7Basic 3"
                        },
                        new
                        {
                            Id = 6,
                            Name = "S7Basic 4"
                        },
                        new
                        {
                            Id = 7,
                            Name = "S7Basic 5"
                        },
                        new
                        {
                            Id = 8,
                            Name = "S7Basic 6"
                        },
                        new
                        {
                            Id = 9,
                            Name = "S7Basic 7"
                        },
                        new
                        {
                            Id = 10,
                            Name = "S7Basic 8"
                        });
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.CpuType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CpuTypeName")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Mean")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CpuTypeName")
                        .IsUnique();

                    b.ToTable("S7CpuType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            CpuTypeName = "S7-200",
                            Mean = "S7 200 cpu type"
                        },
                        new
                        {
                            Id = 1,
                            CpuTypeName = "Logo0BA8",
                            Mean = "Siemens Logo 0BA8 cpu type"
                        },
                        new
                        {
                            Id = 10,
                            CpuTypeName = "S7-300",
                            Mean = "S7 300 cpu type"
                        },
                        new
                        {
                            Id = 20,
                            CpuTypeName = "S7-400",
                            Mean = "S7 400 cpu type"
                        },
                        new
                        {
                            Id = 30,
                            CpuTypeName = "S7-1200",
                            Mean = "S7 1200 cpu type"
                        },
                        new
                        {
                            Id = 40,
                            CpuTypeName = "S7-1500",
                            Mean = "S7 1500 cpu type"
                        });
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.WordLen", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Mean")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WordLenName")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("WordLenName")
                        .IsUnique();

                    b.ToTable("S7WordLen", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Mean = "S7 Bit variable type (bool)",
                            WordLenName = "Bit"
                        },
                        new
                        {
                            Id = 1,
                            Mean = "S7 Byte variable type (8 bits)",
                            WordLenName = "Byte"
                        },
                        new
                        {
                            Id = 2,
                            Mean = "S7 Word variable type (16 bits, 2 bytes)",
                            WordLenName = "Word"
                        },
                        new
                        {
                            Id = 3,
                            Mean = "S7 DWord variable type (32 bits, 4 bytes)",
                            WordLenName = "Dword"
                        },
                        new
                        {
                            Id = 4,
                            Mean = "S7 Int variable type (16 bits, 2 bytes)",
                            WordLenName = "Int"
                        },
                        new
                        {
                            Id = 5,
                            Mean = "DInt variable type (32 bits, 4 bytes)",
                            WordLenName = "DInt"
                        },
                        new
                        {
                            Id = 6,
                            Mean = "Real variable type (32 bits, 4 bytes)",
                            WordLenName = "Real"
                        },
                        new
                        {
                            Id = 7,
                            Mean = "LReal variable type (64 bits, 8 bytes)",
                            WordLenName = "LReal"
                        },
                        new
                        {
                            Id = 8,
                            Mean = "Char Array / C-String variable type (variable)",
                            WordLenName = "String"
                        },
                        new
                        {
                            Id = 9,
                            Mean = "S7 String variable type (variable)",
                            WordLenName = "S7String"
                        },
                        new
                        {
                            Id = 10,
                            Mean = "S7 WString variable type (variable)",
                            WordLenName = "S7WString"
                        },
                        new
                        {
                            Id = 11,
                            Mean = "Timer variable type",
                            WordLenName = "Timer"
                        },
                        new
                        {
                            Id = 12,
                            Mean = "Counter variable type",
                            WordLenName = "Counter"
                        },
                        new
                        {
                            Id = 13,
                            Mean = "DateTime variable type",
                            WordLenName = "DataTime"
                        },
                        new
                        {
                            Id = 14,
                            Mean = "DateTimeLong variable type",
                            WordLenName = "DataTimeLong"
                        });
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.View.Common.TagGroupReady", b =>
                {
                    b.Property<int>("Clock")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Update")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("TagGroupReadyView", (string)null);
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.View.Joined.AllConnection", b =>
                {
                    b.Property<string>("AutomationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AutomationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ConnectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConnectionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ConnectionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CpuTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CpuTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Path")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<short>("Rack")
                        .HasColumnType("smallint");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<bool>("WriteEnable")
                        .HasColumnType("bit");

                    b.ToTable((string)null);

                    b.ToView("AllConnectionView", (string)null);
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.View.Joined.AllTagGroupAllConnection", b =>
                {
                    b.Property<string>("AnalogDigitalSignal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutomationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AutomationTypeId")
                        .HasColumnType("int");

                    b.Property<byte>("BitOfByte")
                        .HasColumnType("tinyint");

                    b.Property<int>("Clock")
                        .HasColumnType("int");

                    b.Property<Guid>("ConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConnectionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ConnectionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CpuTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CpuTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataBlock")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InputOutput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Invoke")
                        .HasColumnType("bit");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<byte[]>("Path")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<short>("Rack")
                        .HasColumnType("smallint");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<int>("StringLength")
                        .HasColumnType("int");

                    b.Property<Guid>("TagGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Update")
                        .HasColumnType("int");

                    b.Property<int>("WordLenId")
                        .HasColumnType("int");

                    b.Property<string>("WordLenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WriteEnable")
                        .HasColumnType("bit");

                    b.ToTable((string)null);

                    b.ToView("AllTagGroupAllConnectionView", (string)null);
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.View.Joined.AllTagGroupConnection", b =>
                {
                    b.Property<string>("AnalogDigitalSignal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutomationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AutomationTypeId")
                        .HasColumnType("int");

                    b.Property<byte>("BitOfByte")
                        .HasColumnType("tinyint");

                    b.Property<int>("Clock")
                        .HasColumnType("int");

                    b.Property<Guid>("ConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataBlock")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InputOutput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Invoke")
                        .HasColumnType("bit");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<int>("StringLength")
                        .HasColumnType("int");

                    b.Property<Guid>("TagGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Update")
                        .HasColumnType("int");

                    b.Property<int>("WordLenId")
                        .HasColumnType("int");

                    b.Property<string>("WordLenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WriteEnable")
                        .HasColumnType("bit");

                    b.ToTable((string)null);

                    b.ToView("AllTagGroupConnectionView", (string)null);
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Logix.LogixConnection", b =>
                {
                    b.HasBaseType("KSociety.Com.Domain.Entity.Common.Connection");

                    b.Property<byte[]>("Path")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("varbinary(3)")
                        .HasDefaultValue(new byte[] { 0, 0, 0 });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Modbus.ModbusConnection", b =>
                {
                    b.HasBaseType("KSociety.Com.Domain.Entity.Common.Connection");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.S7Connection", b =>
                {
                    b.HasBaseType("KSociety.Com.Domain.Entity.Common.Connection");

                    b.Property<int?>("ConnectionTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("CpuTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<short?>("Rack")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short?>("Slot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasIndex("ConnectionTypeId");

                    b.HasIndex("CpuTypeId");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb6f381e-7bf4-4814-df23-08d6a214e1de"),
                            AutomationTypeId = 1,
                            Enable = true,
                            Ip = "192.168.0.201",
                            Name = "Plc1",
                            WriteEnable = true,
                            ConnectionTypeId = 3,
                            CpuTypeId = 40,
                            Rack = (short)0,
                            Slot = (short)1
                        },
                        new
                        {
                            Id = new Guid("fc9967e6-32b9-4077-a018-dce37c857eff"),
                            AutomationTypeId = 1,
                            Enable = true,
                            Ip = "172.16.8.205",
                            Name = "CbPlc",
                            WriteEnable = true,
                            ConnectionTypeId = 3,
                            CpuTypeId = 40,
                            Rack = (short)0,
                            Slot = (short)1
                        });
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Tcp.TcpConnection", b =>
                {
                    b.HasBaseType("KSociety.Com.Domain.Entity.Common.Connection");

                    b.Property<int?>("Port")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Logix.LogixTag", b =>
                {
                    b.HasBaseType("KSociety.Com.Domain.Entity.Common.Tag");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Modbus.ModbusTag", b =>
                {
                    b.HasBaseType("KSociety.Com.Domain.Entity.Common.Tag");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.S7Tag", b =>
                {
                    b.HasBaseType("KSociety.Com.Domain.Entity.Common.Tag");

                    b.Property<int?>("AreaId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<byte?>("BitOfByte")
                        .HasColumnType("tinyint");

                    b.Property<int?>("DataBlock")
                        .HasColumnType("int");

                    b.Property<int?>("Offset")
                        .HasColumnType("int");

                    b.Property<int?>("StringLength")
                        .HasColumnType("int");

                    b.Property<int?>("WordLenId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasIndex("AreaId");

                    b.HasIndex("BitOfByte");

                    b.HasIndex("WordLenId");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b12ab89c-9d46-409c-0bd3-08d6ad638d40"),
                            AnalogDigitalSignal = "Analog",
                            AutomationTypeId = 1,
                            ConnectionId = new Guid("fb6f381e-7bf4-4814-df23-08d6a214e1de"),
                            Enable = true,
                            InputOutput = "R",
                            Invoke = true,
                            MemoryAddress = "DB10.DBW0",
                            Name = "Tag01",
                            TagGroupId = new Guid("a87832e1-f49b-4a3f-bfbe-7df80d9a7cb2"),
                            AreaId = 132,
                            BitOfByte = (byte)0,
                            DataBlock = 10,
                            Offset = 0,
                            StringLength = 1,
                            WordLenId = 2
                        },
                        new
                        {
                            Id = new Guid("d12d5401-a90f-40a4-3b5d-08d6b0418047"),
                            AnalogDigitalSignal = "Analog",
                            AutomationTypeId = 1,
                            ConnectionId = new Guid("fb6f381e-7bf4-4814-df23-08d6a214e1de"),
                            Enable = true,
                            InputOutput = "R",
                            Invoke = true,
                            MemoryAddress = "DB10.DBW2",
                            Name = "Tag02",
                            TagGroupId = new Guid("a87832e1-f49b-4a3f-bfbe-7df80d9a7cb2"),
                            AreaId = 132,
                            BitOfByte = (byte)0,
                            DataBlock = 10,
                            Offset = 2,
                            StringLength = 1,
                            WordLenId = 2
                        },
                        new
                        {
                            Id = new Guid("0d754a9d-1389-4f04-0bd4-08d6ad638d40"),
                            AnalogDigitalSignal = "Analog",
                            AutomationTypeId = 1,
                            ConnectionId = new Guid("fb6f381e-7bf4-4814-df23-08d6a214e1de"),
                            Enable = true,
                            InputOutput = "R",
                            Invoke = true,
                            MemoryAddress = "DB10.DBW4",
                            Name = "Tag03",
                            TagGroupId = new Guid("a87832e1-f49b-4a3f-bfbe-7df80d9a7cb2"),
                            AreaId = 132,
                            BitOfByte = (byte)0,
                            DataBlock = 10,
                            Offset = 4,
                            StringLength = 1,
                            WordLenId = 2
                        },
                        new
                        {
                            Id = new Guid("58315735-142d-4a20-3b5e-08d6b0418047"),
                            AnalogDigitalSignal = "Analog",
                            AutomationTypeId = 1,
                            ConnectionId = new Guid("fb6f381e-7bf4-4814-df23-08d6a214e1de"),
                            Enable = true,
                            InputOutput = "R",
                            Invoke = true,
                            MemoryAddress = "DB10.DBW6",
                            Name = "Tag04",
                            TagGroupId = new Guid("a87832e1-f49b-4a3f-bfbe-7df80d9a7cb2"),
                            AreaId = 132,
                            BitOfByte = (byte)0,
                            DataBlock = 10,
                            Offset = 6,
                            StringLength = 1,
                            WordLenId = 2
                        },
                        new
                        {
                            Id = new Guid("a0412d18-59df-40e3-35a9-08d6b1da6471"),
                            AnalogDigitalSignal = "Analog",
                            AutomationTypeId = 1,
                            ConnectionId = new Guid("fb6f381e-7bf4-4814-df23-08d6a214e1de"),
                            Enable = true,
                            InputOutput = "R",
                            Invoke = true,
                            MemoryAddress = "DB10.DBW8",
                            Name = "Tag05",
                            TagGroupId = new Guid("a87832e1-f49b-4a3f-bfbe-7df80d9a7cb2"),
                            AreaId = 132,
                            BitOfByte = (byte)0,
                            DataBlock = 10,
                            Offset = 8,
                            StringLength = 1,
                            WordLenId = 2
                        },
                        new
                        {
                            Id = new Guid("49d37f56-c1b7-40d7-35aa-08d6b1da6471"),
                            AnalogDigitalSignal = "Analog",
                            AutomationTypeId = 1,
                            ConnectionId = new Guid("fb6f381e-7bf4-4814-df23-08d6a214e1de"),
                            Enable = true,
                            InputOutput = "R",
                            Invoke = true,
                            MemoryAddress = "DB10.DBW10",
                            Name = "Tag06",
                            TagGroupId = new Guid("a87832e1-f49b-4a3f-bfbe-7df80d9a7cb2"),
                            AreaId = 132,
                            BitOfByte = (byte)0,
                            DataBlock = 10,
                            Offset = 10,
                            StringLength = 1,
                            WordLenId = 2
                        });
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Tcp.TcpTag", b =>
                {
                    b.HasBaseType("KSociety.Com.Domain.Entity.Common.Tag");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.Connection", b =>
                {
                    b.HasOne("KSociety.Com.Domain.Entity.Common.AutomationType", "AutomationType")
                        .WithMany("Connections")
                        .HasForeignKey("AutomationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_Connection_AutomationType");

                    b.Navigation("AutomationType");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.Tag", b =>
                {
                    b.HasOne("KSociety.Com.Domain.Entity.Common.AnalogDigital", "AnalogDigital")
                        .WithMany("Tags")
                        .HasForeignKey("AnalogDigitalSignal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_Tag_AnalogDigital");

                    b.HasOne("KSociety.Com.Domain.Entity.Common.AutomationType", "AutomationType")
                        .WithMany("Tags")
                        .HasForeignKey("AutomationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_Tag_AutomationType");

                    b.HasOne("KSociety.Com.Domain.Entity.Common.Connection", "Connection")
                        .WithMany("Tags")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_Tag_ConnectionId");

                    b.HasOne("KSociety.Com.Domain.Entity.Common.InOut", "InOut")
                        .WithMany("Tags")
                        .HasForeignKey("InputOutput")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_Tag_InOut");

                    b.HasOne("KSociety.Com.Domain.Entity.Common.TagGroup", "TagGroup")
                        .WithMany("Tags")
                        .HasForeignKey("TagGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_Tag_TagGroup");

                    b.Navigation("AnalogDigital");

                    b.Navigation("AutomationType");

                    b.Navigation("Connection");

                    b.Navigation("InOut");

                    b.Navigation("TagGroup");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.BlockArea", b =>
                {
                    b.HasOne("KSociety.Com.Domain.Entity.S7.Area", "Area")
                        .WithMany("S7BlockAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_S7BlockArea_Area");

                    b.HasOne("KSociety.Com.Domain.Entity.S7.S7Connection", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KSociety.Com.Domain.Entity.S7.WordLen", "WordLen")
                        .WithMany("S7BlockAreas")
                        .HasForeignKey("WordLenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_S7BlockArea_WordLen");

                    b.Navigation("Area");

                    b.Navigation("Connection");

                    b.Navigation("WordLen");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.S7Connection", b =>
                {
                    b.HasOne("KSociety.Com.Domain.Entity.S7.ConnectionType", "ConnectionType")
                        .WithMany("Connections")
                        .HasForeignKey("ConnectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_S7Connection_S7ConnectionType");

                    b.HasOne("KSociety.Com.Domain.Entity.S7.CpuType", "CpuType")
                        .WithMany("S7Connections")
                        .HasForeignKey("CpuTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_S7Connection_S7CpuType");

                    b.Navigation("ConnectionType");

                    b.Navigation("CpuType");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.S7Tag", b =>
                {
                    b.HasOne("KSociety.Com.Domain.Entity.S7.Area", "Area")
                        .WithMany("S7Tags")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_S7Tag_Area");

                    b.HasOne("KSociety.Com.Domain.Entity.Common.Bit", "Bit")
                        .WithMany("S7Tags")
                        .HasForeignKey("BitOfByte")
                        .HasConstraintName("ForeignKey_S7Tag_Bit");

                    b.HasOne("KSociety.Com.Domain.Entity.S7.WordLen", "WordLen")
                        .WithMany("S7Tags")
                        .HasForeignKey("WordLenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_S7Tag_WordLen");

                    b.Navigation("Area");

                    b.Navigation("Bit");

                    b.Navigation("WordLen");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.AnalogDigital", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.AutomationType", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.Bit", b =>
                {
                    b.Navigation("S7Tags");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.Connection", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.InOut", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.Common.TagGroup", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.Area", b =>
                {
                    b.Navigation("S7BlockAreas");

                    b.Navigation("S7Tags");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.ConnectionType", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.CpuType", b =>
                {
                    b.Navigation("S7Connections");
                });

            modelBuilder.Entity("KSociety.Com.Domain.Entity.S7.WordLen", b =>
                {
                    b.Navigation("S7BlockAreas");

                    b.Navigation("S7Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
