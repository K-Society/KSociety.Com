<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AbbreviatedTypeError" xml:space="preserve">
    <value>The abbreviated type does not match the data type of the data object.</value>
  </data>
  <data name="AccessBeyondObject" xml:space="preserve">
    <value>Attempted to access beyond the end of the object.</value>
  </data>
  <data name="ArrayLengthException" xml:space="preserve">
    <value>The specified array length does not match the destination array length.</value>
  </data>
  <data name="AttributeError" xml:space="preserve">
    <value>An error occurred trying to process one of the attributes.</value>
  </data>
  <data name="BeginOffsetError" xml:space="preserve">
    <value>The beginning offset was beyond the end of the template.</value>
  </data>
  <data name="CIPNotSupported" xml:space="preserve">
    <value>Device does not support CIP</value>
  </data>
  <data name="DimensionsNotSet" xml:space="preserve">
    <value>The dimensions have not been set for this tag. You must set the dimensions before using the multi-dimensional index by using the SetMultipleDimensions function on the tag.</value>
  </data>
  <data name="GroupExists" xml:space="preserve">
    <value>Specified group already exists on the processor.</value>
  </data>
  <data name="GroupNotFound" xml:space="preserve">
    <value>The specified group was not found on the processor.</value>
  </data>
  <data name="IncorrectArgTagType" xml:space="preserve">
    <value>Argument must be a "LogixTag".</value>
  </data>
  <data name="InsufficientAttributes" xml:space="preserve">
    <value>An insufficient number of attributes were provided compared to the attribute count.</value>
  </data>
  <data name="InvalidIOILength" xml:space="preserve">
    <value>The IOI word length did not match the amount of IOI which was processed.</value>
  </data>
  <data name="InvalidResponseSize" xml:space="preserve">
    <value>The processor did not return enough data to complete the data structure.</value>
  </data>
  <data name="ItemNotFound" xml:space="preserve">
    <value>The item referenced could not be found on the processor.</value>
  </data>
  <data name="MalformedIOI" xml:space="preserve">
    <value>The IOI path could not be deciphered by the processor or the matching tag does not exist.</value>
  </data>
  <data name="NotEnoughData" xml:space="preserve">
    <value>Not enough data was sent to the processor to execute the command.</value>
  </data>
  <data name="ProcessorNotConnected" xml:space="preserve">
    <value>Could not establish connection with the processor.</value>
  </data>
  <data name="SessionNotEstablished" xml:space="preserve">
    <value>Session could not be established.</value>
  </data>
  <data name="SessionNotRegistered" xml:space="preserve">
    <value>Session could not be registered with the processor.</value>
  </data>
  <data name="SessionRegistered" xml:space="preserve">
    <value>Session connected and registered.</value>
  </data>
  <data name="SocketError" xml:space="preserve">
    <value>A socket error has occurred. Check the error code for the socket exception number.</value>
  </data>
  <data name="TagNotFound" xml:space="preserve">
    <value>Tag could not be found on the processor.</value>
  </data>
  <data name="TypeConversionError" xml:space="preserve">
    <value>The passed in object could not be converted to the required type.</value>
  </data>
  <data name="TypeMismatch" xml:space="preserve">
    <value>The type returned by the processor does not match the tag type. The processor returned a </value>
  </data>
  <data name="UDTMemberNotFound" xml:space="preserve">
    <value>The specified field of the UDT does not exist in this structure.</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>An unknown error has occurred.</value>
  </data>
</root>